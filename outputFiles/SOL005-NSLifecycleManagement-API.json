{
    "folders": [
        {
            "description": "Folder for ns_lcm_op_occs", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "ca66fd96-aed2-46c7-864d-5e97e6e63f97", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "697386a1-8489-4658-9919-8ccd11a012ee", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07", 
                "697386a1-8489-4658-9919-8ccd11a012ee0", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a43", 
                "697386a1-8489-4658-9919-8ccd11a012ee07", 
                "697386a1-8489-4658-9919-8ccd11a012ee18", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a421", 
                "697386a1-8489-4658-9919-8ccd11a012ee025", 
                "697386a1-8489-4658-9919-8ccd11a012ee36", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a439", 
                "697386a1-8489-4658-9919-8ccd11a012ee043", 
                "697386a1-8489-4658-9919-8ccd11a012ee54", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a457", 
                "697386a1-8489-4658-9919-8ccd11a012ee061", 
                "697386a1-8489-4658-9919-8ccd11a012ee72", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a475", 
                "697386a1-8489-4658-9919-8ccd11a012ee079", 
                "697386a1-8489-4658-9919-8ccd11a012ee90", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a493", 
                "697386a1-8489-4658-9919-8ccd11a012ee097", 
                "697386a1-8489-4658-9919-8ccd11a012ee108", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4111", 
                "697386a1-8489-4658-9919-8ccd11a012ee0115", 
                "697386a1-8489-4658-9919-8ccd11a012ee126", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4129", 
                "697386a1-8489-4658-9919-8ccd11a012ee0133", 
                "697386a1-8489-4658-9919-8ccd11a012ee144", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4147", 
                "697386a1-8489-4658-9919-8ccd11a012ee0151", 
                "697386a1-8489-4658-9919-8ccd11a012ee162", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4165", 
                "697386a1-8489-4658-9919-8ccd11a012ee0169", 
                "697386a1-8489-4658-9919-8ccd11a012ee180", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4183", 
                "697386a1-8489-4658-9919-8ccd11a012ee0187", 
                "697386a1-8489-4658-9919-8ccd11a012ee198", 
                "20017d25-9b8b-47e1-ab4a-359d0e8527a4201", 
                "697386a1-8489-4658-9919-8ccd11a012ee0205", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5217", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd221", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07224", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5232", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd236", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07239", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5247", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd251", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07254", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5262", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd266", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07269", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5277", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd281", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07284", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5292", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd296", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07299", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5307", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd311", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07314", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5322", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd326", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07329", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5337", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd341", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07344", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5352", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd356", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07359", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5367", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd371", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07374", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5382", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd386", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07389", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5397", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd401", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07404", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5412", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd416", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07419", 
                "c6388778-3958-4ded-b411-ee70f2fdbcd5427", 
                "fe99abbf-3512-4809-92da-15a4a69ebbfd431", 
                "3c53d816-21a0-48e2-968d-6c2f88a12f07434"
            ], 
            "name": "ns_lcm_op_occs"
        }, 
        {
            "description": "Folder for nslcm", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "41fb1e25-c2c5-4b5f-8849-749218556dc0", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "70f3a803-01cd-4555-be4f-9ec67035a684", 
                "2901531c-a75f-45b6-90be-f39388db647c", 
                "70f3a803-01cd-4555-be4f-9ec67035a684216", 
                "2901531c-a75f-45b6-90be-f39388db647c228", 
                "70f3a803-01cd-4555-be4f-9ec67035a684231", 
                "2901531c-a75f-45b6-90be-f39388db647c243", 
                "70f3a803-01cd-4555-be4f-9ec67035a684246", 
                "2901531c-a75f-45b6-90be-f39388db647c258", 
                "70f3a803-01cd-4555-be4f-9ec67035a684261", 
                "2901531c-a75f-45b6-90be-f39388db647c273", 
                "70f3a803-01cd-4555-be4f-9ec67035a684276", 
                "2901531c-a75f-45b6-90be-f39388db647c288", 
                "70f3a803-01cd-4555-be4f-9ec67035a684291", 
                "2901531c-a75f-45b6-90be-f39388db647c303", 
                "70f3a803-01cd-4555-be4f-9ec67035a684306", 
                "2901531c-a75f-45b6-90be-f39388db647c318", 
                "70f3a803-01cd-4555-be4f-9ec67035a684321", 
                "2901531c-a75f-45b6-90be-f39388db647c333", 
                "70f3a803-01cd-4555-be4f-9ec67035a684336", 
                "2901531c-a75f-45b6-90be-f39388db647c348", 
                "70f3a803-01cd-4555-be4f-9ec67035a684351", 
                "2901531c-a75f-45b6-90be-f39388db647c363", 
                "70f3a803-01cd-4555-be4f-9ec67035a684366", 
                "2901531c-a75f-45b6-90be-f39388db647c378", 
                "70f3a803-01cd-4555-be4f-9ec67035a684381", 
                "2901531c-a75f-45b6-90be-f39388db647c393", 
                "70f3a803-01cd-4555-be4f-9ec67035a684396", 
                "2901531c-a75f-45b6-90be-f39388db647c408", 
                "70f3a803-01cd-4555-be4f-9ec67035a684411", 
                "2901531c-a75f-45b6-90be-f39388db647c423", 
                "70f3a803-01cd-4555-be4f-9ec67035a684426", 
                "2901531c-a75f-45b6-90be-f39388db647c438"
            ], 
            "name": "nslcm"
        }, 
        {
            "description": "Folder for ns_instances", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "0c595828-9b28-4950-9583-21aae7ebc001", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff", 
                "17c85262-6673-4f14-b118-e62dc37519fe", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0", 
                "1859d7b6-4b3c-468f-b939-d4484466444f", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff1", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04214", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff19", 
                "006988e0-c9eb-44bd-8113-9a3deca46f0420", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04232", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff37", 
                "006988e0-c9eb-44bd-8113-9a3deca46f0438", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04250", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff55", 
                "006988e0-c9eb-44bd-8113-9a3deca46f0456", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04268", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff73", 
                "006988e0-c9eb-44bd-8113-9a3deca46f0474", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04286", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff91", 
                "006988e0-c9eb-44bd-8113-9a3deca46f0492", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042104", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff109", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04110", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042122", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff127", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04128", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042140", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff145", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04146", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042158", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff163", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04164", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042176", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff181", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04182", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042194", 
                "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff199", 
                "006988e0-c9eb-44bd-8113-9a3deca46f04200", 
                "006988e0-c9eb-44bd-8113-9a3deca46f042212", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139218", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec220", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0222", 
                "1859d7b6-4b3c-468f-b939-d4484466444f223", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe225", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2230", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139233", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec235", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0237", 
                "1859d7b6-4b3c-468f-b939-d4484466444f238", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe240", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2245", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139248", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec250", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0252", 
                "1859d7b6-4b3c-468f-b939-d4484466444f253", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe255", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2260", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139263", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec265", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0267", 
                "1859d7b6-4b3c-468f-b939-d4484466444f268", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe270", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2275", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139278", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec280", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0282", 
                "1859d7b6-4b3c-468f-b939-d4484466444f283", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe285", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2290", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139293", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec295", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0297", 
                "1859d7b6-4b3c-468f-b939-d4484466444f298", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe300", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2305", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139308", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec310", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0312", 
                "1859d7b6-4b3c-468f-b939-d4484466444f313", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe315", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2320", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139323", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec325", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0327", 
                "1859d7b6-4b3c-468f-b939-d4484466444f328", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe330", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2335", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139338", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec340", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0342", 
                "1859d7b6-4b3c-468f-b939-d4484466444f343", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe345", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2350", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139353", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec355", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0357", 
                "1859d7b6-4b3c-468f-b939-d4484466444f358", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe360", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2365", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139368", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec370", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0372", 
                "1859d7b6-4b3c-468f-b939-d4484466444f373", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe375", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2380", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139383", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec385", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0387", 
                "1859d7b6-4b3c-468f-b939-d4484466444f388", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe390", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2395", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139398", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec400", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0402", 
                "1859d7b6-4b3c-468f-b939-d4484466444f403", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe405", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2410", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139413", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec415", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0417", 
                "1859d7b6-4b3c-468f-b939-d4484466444f418", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe420", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2425", 
                "a5d1d1d4-a0f9-4648-b331-8962dcc2e139428", 
                "6f8ecc42-fe7a-45cc-9ced-6926091390ec430", 
                "a72ffade-0149-4600-80ce-7f5e087d30f0432", 
                "1859d7b6-4b3c-468f-b939-d4484466444f433", 
                "28cb357c-3964-49e7-aad8-1010d9afcbbe435", 
                "8da9deee-fabc-4524-84ac-3e78c30dbfd2440", 
                "17c85262-6673-4f14-b118-e62dc37519fe441", 
                "17c85262-6673-4f14-b118-e62dc37519fe443", 
                "17c85262-6673-4f14-b118-e62dc37519fe445", 
                "17c85262-6673-4f14-b118-e62dc37519fe447", 
                "17c85262-6673-4f14-b118-e62dc37519fe449", 
                "17c85262-6673-4f14-b118-e62dc37519fe451", 
                "17c85262-6673-4f14-b118-e62dc37519fe453", 
                "17c85262-6673-4f14-b118-e62dc37519fe455", 
                "17c85262-6673-4f14-b118-e62dc37519fe457", 
                "17c85262-6673-4f14-b118-e62dc37519fe459", 
                "17c85262-6673-4f14-b118-e62dc37519fe461"
            ], 
            "name": "ns_instances"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "37279117-c036-40dc-bf8b-6f5f1c7536ca", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "4266b423-d02a-4415-9512-525e9a8794a6", 
                "4266b423-d02a-4415-9512-525e9a8794a6219", 
                "4266b423-d02a-4415-9512-525e9a8794a6234", 
                "4266b423-d02a-4415-9512-525e9a8794a6249", 
                "4266b423-d02a-4415-9512-525e9a8794a6264", 
                "4266b423-d02a-4415-9512-525e9a8794a6279", 
                "4266b423-d02a-4415-9512-525e9a8794a6294", 
                "4266b423-d02a-4415-9512-525e9a8794a6309", 
                "4266b423-d02a-4415-9512-525e9a8794a6324", 
                "4266b423-d02a-4415-9512-525e9a8794a6339", 
                "4266b423-d02a-4415-9512-525e9a8794a6354", 
                "4266b423-d02a-4415-9512-525e9a8794a6369", 
                "4266b423-d02a-4415-9512-525e9a8794a6384", 
                "4266b423-d02a-4415-9512-525e9a8794a6399", 
                "4266b423-d02a-4415-9512-525e9a8794a6414", 
                "4266b423-d02a-4415-9512-525e9a8794a6429"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "8dd4f5a1-3a3e-4daa-ae5e-db9b8cfbddd9", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "ed0d5ee1-4591-4aa0-9f5d-264214941213", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213226", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213241", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213256", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213271", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213286", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213301", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213316", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213331", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213346", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213361", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213376", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213391", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213406", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213421", 
                "ed0d5ee1-4591-4aa0-9f5d-264214941213436"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "aa514f12-ce31-4867-bd39-aa8019bede44", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a714", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a5", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7122", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a23", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7140", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a41", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7158", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a59", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7176", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a77", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7194", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a95", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71112", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a113", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71130", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a131", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71148", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a149", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71166", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a167", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71184", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a185", 
                "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71202", 
                "4f8bfb65-ac20-4c97-8397-009ab1004d6a203", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491227", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491242", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491257", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491272", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491287", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491302", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491317", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491332", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491347", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491362", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491377", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491392", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491407", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491422", 
                "55ede394-4f7d-42e4-a349-1c497c7d5491437", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc442", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc444", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc446", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc448", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc450", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc452", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc454", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc456", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc458", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc460", 
                "31db6d63-f299-4c5d-acc1-2a941e5b6edc462"
            ], 
            "name": "subscriptions"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "collection_name": "SOL005 - NS Lifecycle Management Interface", 
            "collection": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "id": "1fe01ccc-64e5-44e0-a323-aee4de46b157", 
            "collection_id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "order": [
                "d943eb53-2652-40fb-be4f-f4ec84697962", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8", 
                "d943eb53-2652-40fb-be4f-f4ec846979626", 
                "d943eb53-2652-40fb-be4f-f4ec8469796224", 
                "d943eb53-2652-40fb-be4f-f4ec8469796242", 
                "d943eb53-2652-40fb-be4f-f4ec8469796260", 
                "d943eb53-2652-40fb-be4f-f4ec8469796278", 
                "d943eb53-2652-40fb-be4f-f4ec8469796296", 
                "d943eb53-2652-40fb-be4f-f4ec84697962114", 
                "d943eb53-2652-40fb-be4f-f4ec84697962132", 
                "d943eb53-2652-40fb-be4f-f4ec84697962150", 
                "d943eb53-2652-40fb-be4f-f4ec84697962168", 
                "d943eb53-2652-40fb-be4f-f4ec84697962186", 
                "d943eb53-2652-40fb-be4f-f4ec84697962204", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8229", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8244", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8259", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8274", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8289", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8304", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8319", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8334", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8349", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8364", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8379", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8394", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8409", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8424", 
                "9ab7545a-2548-4aec-9217-c6dcb947eed8439"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification"
        }
    ], 
    "description": "SOL005 - NS Lifecycle Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Mark a NS lifecycle management operation occurrence as failed."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Retry a NS lifecycle management operation occurrence."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Heal a NS instance."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS lifecycle change"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "description": "The POST method requests to instantiate a NS instance resource.\n", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Instantiate a NS."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Rollback a NS lifecycle management operation occurrence."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual NS instance resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe", 
            "name": "Delete NS instance resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "description": "The POST method creates a new NS instance resource.\n", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a NS instance resource."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Updates a NS instance."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual NS LCM operation occurrence resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Continue a NS lifecycle management operation occurrence."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Terminate a NS instance."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS lifecycle change"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Subscribe to NS lifecycle change notifications."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual subscription resource."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc", 
            "name": "Terminate a subscription."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Cancel a NS lifecycle management operation occurrence."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Test the notification endpoint."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about NS lifecycle change"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "description": "The POST method requests to scale a NS instance resource.\n", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Scale a NS instance."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS LCM operation occurrences."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple NS instances."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff1", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a43", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a714", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a5", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec846979626", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee07", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee18", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee29", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee310", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee411", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04012", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04113", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04214", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04315", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04416", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04517", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee18", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff19", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f0420", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a421", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7122", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a23", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec8469796224", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee025", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee227", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee328", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee429", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04030", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04131", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04232", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04333", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04434", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04535", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee36", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff37", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f0438", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a439", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7140", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a41", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec8469796242", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee043", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee144", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee245", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee346", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee447", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04048", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04149", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04250", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04351", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04452", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04553", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee54", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff55", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f0456", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a457", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7158", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a59", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec8469796260", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee061", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee162", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee263", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee364", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee465", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04066", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04167", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04268", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04369", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/105?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04470", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/106?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04571", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/107?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee72", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/108?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff73", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/109?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f0474", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/110?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a475", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/111?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7176", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/112?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a77", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/113?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec8469796278", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/114?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee079", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/115?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee180", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/116?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee281", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/117?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee382", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/118?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee483", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/119?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04084", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/120?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04185", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/121?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04286", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/122?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04387", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/123?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04488", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04589", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee90", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff91", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f0492", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/nslcm/v1/ns_instancessecnatsni_sn?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a493", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionssnoitpircsbus", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a7194", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/nslcm/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a95", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/nslcm/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotificationnoitacifitoNnoiteleDreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "d943eb53-2652-40fb-be4f-f4ec8469796296", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotificationnoitacifitoNnoiteleDreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee097", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee198", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee299", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3100", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4101", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040102", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/nslcm/v1/ns_instancessecnatsni_sn?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041103", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/nslcm/v1/ns_instancessecnatsni_sn?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042104", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/nslcm/v1/ns_instancessecnatsni_sn?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043105", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/nslcm/v1/ns_instancessecnatsni_sn?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044106", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/142?query=/nslcm/v1/ns_instancessecnatsni_sn?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045107", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/143?query=/nslcm/v1/ns_instancessecnatsni_sn',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee108", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/144?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff109", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/145?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04110", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/146?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4111", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/147?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71112", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/148?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a113", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/149?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962114", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/150?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0115", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/151?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1116", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/152?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2117", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/153?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3118", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/154?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4119", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/155?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040120", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/156?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041121", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/157?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042122", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/158?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043123", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/159?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044124", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/160?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045125", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/161?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/162?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff127", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/163?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04128", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/164?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4129", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/165?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71130", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/166?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a131", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/167?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962132", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/168?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0133", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/169?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1134", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/170?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2135", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/171?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3136", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/172?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4137", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/173?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040138", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/174?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/175?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042140", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/176?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043141", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/177?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044142", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/178?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045143", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/179?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee144", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/180?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff145", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/181?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04146", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/182?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4147", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/183?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71148", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/184?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a149", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/185?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962150", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/186?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0151", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/187?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1152", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/188?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2153", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/189?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3154", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/190?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4155", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/191?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040156", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/192?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041157", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/193?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042158", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/194?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043159", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/195?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044160", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/196?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045161", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/197?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filters={{filter}}&fieldss={{fields}}&exclude_fieldss={{exclude_fields}}&exclude_defaults={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee162", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/198?query=/nslcm/v1/ns_lcm_op_occs?filters={{filter}}?fieldss={{fields}}?exclude_fieldss={{exclude_fields}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceIds", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff163", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/199?query=/nslcm/v1/ns_instances/:nsInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filters={{filter}}&all_fieldss={{all_fields}}&fieldss={{fields}}&exclude_fieldss={{exclude_fields}}&exclude_defaults={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04164", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/200?query=/nslcm/v1/ns_instances?filters={{filter}}?all_fieldss={{all_fields}}?fieldss={{fields}}?exclude_fieldss={{exclude_fields}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccIds", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4165", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/201?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionss", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71166", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/202?query=/nslcm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionIds", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a167", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/203?query=/nslcm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotifications", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962168", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/204?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filters={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0169", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/205?query=/nslcm/v1/ns_lcm_op_occs?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fieldss={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1170", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/206?query=/nslcm/v1/ns_lcm_op_occs?fieldss={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fieldss={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2171", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/207?query=/nslcm/v1/ns_lcm_op_occs?exclude_fieldss={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_defaults={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3172", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/208?query=/nslcm/v1/ns_lcm_op_occs?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occss", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4173", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/209?query=/nslcm/v1/ns_lcm_op_occss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filters={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040174", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/210?query=/nslcm/v1/ns_instances?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fieldss={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041175", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/211?query=/nslcm/v1/ns_instances?all_fieldss={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fieldss={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042176", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/212?query=/nslcm/v1/ns_instances?fieldss={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fieldss={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043177", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/213?query=/nslcm/v1/ns_instances?exclude_fieldss={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_defaults={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044178", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/214?query=/nslcm/v1/ns_instances?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancess", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045179", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/215?query=/nslcm/v1/ns_instancess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee180", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/216?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff181", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/217?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04182", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/218?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4183", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/219?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71184", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/220?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a185", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/221?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962186", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/222?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0187", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/223?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1188", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/224?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2189", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/225?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3190", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/226?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4191", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/227?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040192", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/228?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041193", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/229?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042194", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/230?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043195", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/231?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044196", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/232?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045197", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/233?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee198", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/234?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "id": "1c0a3248-a82c-403e-b8c7-ab76bf4a1dff199", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/235?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a NS instance by  reading an individual NS instance resource.   \n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}&all_fields={{all_fields}}&fields={{fields}}&exclude_fields={{exclude_fields}}&exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f04200", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/236?query=/nslcm/v1/ns_instances?filter={{filter}}?all_fields={{all_fields}}?fields={{fields}}?exclude_fields={{exclude_fields}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId", 
            "id": "20017d25-9b8b-47e1-ab4a-359d0e8527a4201", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/237?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to retrieve status information about  a NS lifecycle management operation occurrence by reading an individual \"NS LCM operation occurrence\" resource. This method shall follow the provisions specified in the  Tables 6.4.10.3.2-1 and 6.4.10.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "fbf810cb-a3b6-4b1d-ab6b-9b368b269a71202", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/238?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query Subscription Information.\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "id": "4f8bfb65-ac20-4c97-8397-009ab1004d6a203", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/239?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method retrieves information about a subscription by reading an individual subscription resource. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.2-1 and 6.4.17.3.2-2\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "d943eb53-2652-40fb-be4f-f4ec84697962204", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/240?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?filter={{filter}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee0205", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/241?query=/nslcm/v1/ns_lcm_op_occs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?fields={{fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee1206", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/242?query=/nslcm/v1/ns_lcm_op_occs?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee2207", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/243?query=/nslcm/v1/ns_lcm_op_occs?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee3208", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/244?query=/nslcm/v1/ns_lcm_op_occs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs", 
            "id": "697386a1-8489-4658-9919-8ccd11a012ee4209", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/245?query=/nslcm/v1/ns_lcm_op_occs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get Operation Status. The client can use this method to query status information about multiple NS lifecycle management operation occurrences. This method shall follow the provisions specified in the Tables 6.4.9.3.2-1 and 6.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?filter={{filter}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f040210", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/246?query=/nslcm/v1/ns_instances?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?all_fields={{all_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f041211", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/247?query=/nslcm/v1/ns_instances?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?fields={{fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f042212", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/248?query=/nslcm/v1/ns_instances?fields={{fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"fields\",currentData.fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f043213", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/249?query=/nslcm/v1/ns_instances?exclude_fields={{exclude_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_fields\",currentData.exclude_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances?exclude_default={{exclude_default}}", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f044214", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/250?query=/nslcm/v1/ns_instances?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "006988e0-c9eb-44bd-8113-9a3deca46f045215", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/251?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Query NS Instances.\nThe GET method queries information about multiple NS instances. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.2.3.2-1 and 6.4.2.3.2-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684216", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5217", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139218", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6219", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec220", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd221", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0222", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f223", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07224", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe225", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213226", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491227", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c228", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8229", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2230", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684231", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5232", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139233", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6234", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec235", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd236", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0237", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f238", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07239", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe240", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213241", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491242", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c243", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8244", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2245", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684246", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5247", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139248", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6249", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec250", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd251", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0252", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f253", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07254", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe255", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213256", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491257", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c258", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8259", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_202", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2260", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684261", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5262", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139263", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6264", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec265", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd266", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0267", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f268", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07269", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe270", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213271", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491272", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c273", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8274", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2275", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684276", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5277", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139278", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6279", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec280", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd281", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0282", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f283", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07284", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe285", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213286", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491287", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c288", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8289", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2290", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684291", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5292", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139293", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6294", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec295", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd296", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0297", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f298", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07299", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe300", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213301", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491302", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c303", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8304", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2305", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684306", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5307", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139308", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6309", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec310", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd311", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0312", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f313", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07314", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe315", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213316", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491317", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c318", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8319", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2320", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684321", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5322", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139323", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6324", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec325", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd326", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0327", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f328", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07329", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe330", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213331", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491332", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c333", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8334", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2335", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684336", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5337", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139338", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotificationnoitacifitoNnoitaerCreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6339", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotificationnoitacifitoNnoitaerCreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec340", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd341", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0342", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f343", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07344", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe345", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotificationnoitacifitoNecnerruccOnoitarepOmcLsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213346", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotificationnoitacifitoNecnerruccOnoitarepOmcLsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionssnoitpircsbus", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491347", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c348", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occsscco_po_mcl_sn/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotificationnoitacifitoNnoiteleDreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8349", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotificationnoitacifitoNnoiteleDreifitnedIsN-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2350", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684351", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5352", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139353", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6354", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec355", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd356", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0357", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f358", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07359", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe360", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213361", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491362", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c363", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8364", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2365", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684366", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5367", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139368", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6369", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec370", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd371", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0372", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f373", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07374", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe375", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213376", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491377", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c378", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8379", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2380", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684381", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5382", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139383", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6384", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec385", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd386", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0387", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f388", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07389", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe390", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213391", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491392", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c393", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8394", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2395", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fails", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684396", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fails',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retrys", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5397", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retrys',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heals", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139398", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heals',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotifications", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6399", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiates", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec400", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollbacks", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd401", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollbacks',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancess", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0402", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instancess',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/updates", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f403", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/updates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continues", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07404", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continues',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminates", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe405", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotifications", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213406", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionss", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491407", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancels", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c408", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancels',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotifications", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8409", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scales", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2410", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scales',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684411", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5412", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139413", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6414", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec415", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd416", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0417", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f418", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07419", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe420", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213421", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491422", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c423", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8424", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2425", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail", 
            "id": "70f3a803-01cd-4555-be4f-9ec67035a684426", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802018, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/fail',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method marks a NS lifecycle management operation  occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry", 
            "id": "c6388778-3958-4ded-b411-ee70f2fdbcd5427", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/retry',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates retrying a NS lifecycle management operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.11.3.1-1 and 6.4.11.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/heal", 
            "id": "a5d1d1d4-a0f9-4648-b331-8962dcc2e139428", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"HealNsRequest\": {\n        \"healVnfData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"cause\": \"cause\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"healNsData\": {\n            \"healScript\": \"healscript\",\n            \"actionsHealing\": [\n                \"actionshealing\"\n            ],\n            \"additionalParamsforNs\": {},\n            \"degreeHealing\": \"heal_restore\"\n        }\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/heal',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to heal a NS instance resource. This method shall follow the provisions specified in the Tables 6.4.7.3.1-1 and  6.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification", 
            "id": "4266b423-d02a-4415-9512-525e9a8794a6429", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierCreationNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.027z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802019, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierCreationNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/instantiate", 
            "id": "6f8ecc42-fe7a-45cc-9ced-6926091390ec430", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"InstantiateNsRequest\": {\n        \"nsFlavourId\": \"nsflavourid\",\n        \"additionalParamsForVnf\": [\n            {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"vnfInstanceData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"localizationLanguage\": [\n            {\n                \"locationConstraints\": {\n                    \"civicAddressElement\": [\n                        {\n                            \"caValue\": \"cavalue\",\n                            \"caType\": 0\n                        }\n                    ],\n                    \"countryCode\": \"countrycode\"\n                },\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"additionalParamsForNs\": {},\n        \"nsInstantiationLevelId\": \"nsinstantiationlevelid\",\n        \"addpnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"additionalAffinityOrAntiAffiniityRule\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"vnfdId\": [\n                    \"vnfdid\"\n                ],\n                \"scope\": \"nfvi_pop\",\n                \"vnfProfileId\": [\n                    \"vnfprofileid\"\n                ],\n                \"affinityOrAntiAffiinty\": \"affinity\"\n            }\n        ],\n        \"startTime\": \"2019-06-27t08:06:42.032z\",\n        \"sapData\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"nestedNsInstanceId\": [\n            \"nestednsinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/instantiate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to instantiate a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback", 
            "id": "fe99abbf-3512-4809-92da-15a4a69ebbfd431", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/rollback',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates rolling back a NS lifecycle operation  if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the  Tables 6.4.12.3.1-1 and 6.4.12.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "id": "a72ffade-0149-4600-80ce-7f5e087d30f0432", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateNsRequest\": {\n        \"nsDescription\": \"nsdescription\",\n        \"nsdId\": \"nsdid\",\n        \"nsName\": \"nsname\"\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new NS instance resource.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/update", 
            "id": "1859d7b6-4b3c-468f-b939-d4484466444f433", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"UpdateNsRequest\": {\n        \"removePnfId\": [\n            \"removepnfid\"\n        ],\n        \"operateVnfData\": [\n            {\n                \"stopType\": \"forceful\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"changeStateTo\": \"started\",\n                \"gracefulStopTimeout\": 0\n            }\n        ],\n        \"updateTime\": \"2019-06-27t08:06:42.032z\",\n        \"removeSapId\": [\n            \"removesapid\"\n        ],\n        \"removeVnffgId\": [\n            \"removevnffgid\"\n        ],\n        \"addVnfIstance\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfProfileId\": \"vnfprofileid\"\n            }\n        ],\n        \"addPnfData\": [\n            {\n                \"pnfProfileId\": \"pnfprofileid\",\n                \"pnfdId\": \"pnfdid\",\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"addNestedNsId\": [\n            \"addnestednsid\"\n        ],\n        \"changeVnfFlavourData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"instantiationLevelId\": \"instantiationlevelid\",\n                \"newFlavourId\": \"newflavourid\",\n                \"additionalParams\": {},\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ]\n            }\n        ],\n        \"assocNewNsdVersionData\": {\n            \"sync\": true,\n            \"newNsdId\": \"newnsdid\"\n        },\n        \"addVnffg\": [\n            {\n                \"targetNsInstanceId\": \"targetnsinstanceid\",\n                \"vnffgName\": \"vnffgname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"addSap\": [\n            {\n                \"sapProtocolData\": [\n                    {\n                        \"layerProtocol\": \"ip_over_ethernet\",\n                        \"ipOverEthernet\": {\n                            \"macAddress\": \"macaddress\",\n                            \"ipAddresses\": [\n                                {\n                                    \"fixedAddresses\": [\n                                        \"fixedaddresses\"\n                                    ],\n                                    \"subnetId\": \"subnetid\",\n                                    \"addressRange\": {\n                                        \"maxAddress\": \"maxaddress\",\n                                        \"minAddress\": \"minaddress\"\n                                    },\n                                    \"type\": \"ipv4\",\n                                    \"numDynamicAddresses\": 0\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"description\": \"description\"\n            }\n        ],\n        \"moveVnfInstanceData\": [\n            {\n                \"vnfInstanceId\": [\n                    \"vnfinstanceid\"\n                ],\n                \"targetNsInstanceId\": \"targetnsinstanceid\"\n            }\n        ],\n        \"changeExtVnfConnectivityData\": [\n            {\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"extVirtualLink\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"additionalParams\": {}\n            }\n        ],\n        \"modifyPnfData\": [\n            {\n                \"pnfName\": \"pnfname\",\n                \"pnfId\": \"pnfid\",\n                \"cpData\": [\n                    {\n                        \"cpProtocolData\": [\n                            {\n                                \"layerProtocol\": \"ip_over_ethernet\",\n                                \"ipOverEthernet\": {\n                                    \"macAddress\": \"macaddress\",\n                                    \"ipAddresses\": [\n                                        {\n                                            \"fixedAddresses\": [\n                                                \"fixedaddresses\"\n                                            ],\n                                            \"subnetId\": \"subnetid\",\n                                            \"addressRange\": {\n                                                \"maxAddress\": \"maxaddress\",\n                                                \"minAddress\": \"minaddress\"\n                                            },\n                                            \"type\": \"ipv4\",\n                                            \"numDynamicAddresses\": 0\n                                        }\n                                    ]\n                                }\n                            }\n                        ],\n                        \"cpInstanceI16\": \"cpinstancei16\",\n                        \"cpdId\": \"cpdid\"\n                    }\n                ]\n            }\n        ],\n        \"updateType\": \"add_vnf\",\n        \"removeNestedNsId\": [\n            \"removenestednsid\"\n        ],\n        \"instantiateVnfData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"extVirtualLinks\": [\n                    {\n                        \"extVirtualLinkId\": \"extvirtuallinkid\",\n                        \"extCps\": [\n                            {\n                                \"cpConfig\": [\n                                    {\n                                        \"linkPortId\": \"linkportid\",\n                                        \"cpInstanceId\": \"cpinstanceid\",\n                                        \"cpProtocolData\": [\n                                            {\n                                                \"layerProtocol\": \"ip_over_ethernet\",\n                                                \"ipOverEthernet\": {\n                                                    \"macAddress\": \"macaddress\",\n                                                    \"ipAddresses\": [\n                                                        {\n                                                            \"fixedAddresses\": [\n                                                                \"fixedaddresses\"\n                                                            ],\n                                                            \"subnetId\": \"subnetid\",\n                                                            \"addressRange\": {\n                                                                \"maxAddress\": \"maxaddress\",\n                                                                \"minAddress\": \"minaddress\"\n                                                            },\n                                                            \"type\": \"ipv4\",\n                                                            \"numDynamicAddresses\": 0\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ],\n                                \"cpdId\": \"cpdid\"\n                            }\n                        ],\n                        \"vimId\": \"vimid\",\n                        \"resourceId\": \"resourceid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"extLinkPorts\": [\n                            {\n                                \"resourceHandle\": {\n                                    \"resourceId\": \"resourceid\",\n                                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                    \"vimConnectionId\": \"vimconnectionid\",\n                                    \"resourceProviderId\": \"resourceproviderid\"\n                                },\n                                \"id\": \"id\"\n                            }\n                        ]\n                    }\n                ],\n                \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"localizationLanguage\": \"localizationlanguage\",\n                \"extManagedVirtualLinks\": [\n                    {\n                        \"extManagedVirtualLinkId\": \"extmanagedvirtuallinkid\",\n                        \"virtualLinkDescId\": \"virtuallinkdescid\",\n                        \"vimId\": \"vimid\",\n                        \"resourceProviderId\": \"resourceproviderid\",\n                        \"resourceId\": \"resourceid\"\n                    }\n                ],\n                \"vnfFlavourId\": \"vnfflavourid\",\n                \"vnfdId\": \"vnfdid\",\n                \"additionalParams\": {}\n            }\n        ],\n        \"changeNsFlavourData\": {\n            \"instantiationLevelId\": \"instantiationlevelid\",\n            \"newNsFlavourId\": \"newnsflavourid\"\n        },\n        \"updateVnffg\": [\n            {\n                \"vnffgInfoId\": \"vnffginfoid\",\n                \"nfpInfoId\": [\n                    \"nfpinfoid\"\n                ],\n                \"nfp\": [\n                    {\n                        \"nsCpHandle\": [\n                            {\n                                \"nsSapInstanceId\": \"nssapinstanceid\",\n                                \"vnfInstanceId\": \"vnfinstanceid\",\n                                \"pnfInfoId\": \"pnfinfoid\",\n                                \"nsInstanceId\": \"nsinstanceid\",\n                                \"pnfExtCpInstanceId\": \"pnfextcpinstanceid\",\n                                \"vnfExtCpInstanceId\": \"vnfextcpinstanceid\"\n                            }\n                        ],\n                        \"nfpRule\": {\n                            \"protocol\": \"tcp\",\n                            \"extendedCriteria\": [\n                                {\n                                    \"length\": 0,\n                                    \"startingPoint\": 0,\n                                    \"value\": \"value\"\n                                }\n                            ],\n                            \"etherType\": \"ipv4\",\n                            \"destinationIpAddressPrefix\": \"destinationipaddressprefix\",\n                            \"dscp\": \"dscp\",\n                            \"etherDestinationAddress\": \"etherdestinationaddress\",\n                            \"destinationPortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            },\n                            \"vlanTag\": [\n                                \"vlantag\"\n                            ],\n                            \"etherSourceAddress\": \"ethersourceaddress\",\n                            \"sourceIpAddressPrefix\": \"sourceipaddressprefix\",\n                            \"sourcePortRange\": {\n                                \"lowerPort\": 0,\n                                \"upperPort\": 0\n                            }\n                        },\n                        \"nfpName\": \"nfpname\",\n                        \"description\": \"description\",\n                        \"nfpInfoId\": \"nfpinfoid\"\n                    }\n                ]\n            }\n        ],\n        \"modifyVnfInfoData\": [\n            {\n                \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                \"vnfPkgId\": \"vnfpkgid\",\n                \"vnfInstanceId\": \"vnfinstanceid\",\n                \"vnfInstanceName\": \"vnfinstancename\",\n                \"Extensions\": {},\n                \"vnfConfigurableProperties\": {},\n                \"Metadata\": {}\n            }\n        ],\n        \"removeVnfInstanceId\": [\n            \"removevnfinstanceid\"\n        ]\n    }\n}", 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/update',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Scale NS instance. The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue", 
            "id": "3c53d816-21a0-48e2-968d-6c2f88a12f07434", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802021, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/continue',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates continuing an NS lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"NS LCM operation occurrence\" is in \"FAILED_TEMP\" state. This method shall follow the provisions specified in the Tables 6.4.13.3.1-1 and 6.4.13.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/terminate", 
            "id": "28cb357c-3964-49e7-aad8-1010d9afcbbe435", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"TerminateNsRequest\": {\n        \"terminationTime\": \"2019-06-27t08:06:42.035z\"\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/terminate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Terminate NS task.   The POST method terminates a NS instance. This method can only be  used with a NS instance in the INSTANTIATED state. Terminating a NS instance does not delete the NS instance identifier,  but rather transitions the NS into the NOT_INSTANTIATED state. This method shall support the URI query parameters, request and  response data structures, and response codes, as specified in the Tables 6.4.8.3.1-1 and 6.8.8.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification", 
            "id": "ed0d5ee1-4591-4aa0-9f5d-264214941213436", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsLcmOperationOccurrenceNotification\": {\n        \"nsLcmOpOccId\": \"nslcmopoccid\",\n        \"affectedVnf\": {\n            \"vnfName\": \"vnfname\",\n            \"vnfInstanceId\": \"vnfinstanceid\",\n            \"changedInfo\": {\n                \"changedVnfInfo\": {\n                    \"vnfInstanceDescription\": \"vnfinstancedescription\",\n                    \"vnfPkgId\": \"vnfpkgid\",\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfInstanceName\": \"vnfinstancename\",\n                    \"Extensions\": {},\n                    \"vnfConfigurableProperties\": {},\n                    \"Metadata\": {}\n                },\n                \"changedExtConnectivity\": {\n                    \"resourceHandle\": {\n                        \"resourceId\": \"resourceid\",\n                        \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                        \"vimConnectionId\": \"vimconnectionid\",\n                        \"resourceProviderId\": \"resourceproviderid\"\n                    },\n                    \"id\": \"id\",\n                    \"extLinkPorts\": [\n                        {\n                            \"resourceHandle\": {\n                                \"resourceId\": \"resourceid\",\n                                \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                                \"vimConnectionId\": \"vimconnectionid\",\n                                \"resourceProviderId\": \"resourceproviderid\"\n                            },\n                            \"cpInstanceId\": \"cpinstanceid\",\n                            \"id\": \"id\"\n                        }\n                    ]\n                }\n            },\n            \"changeResult\": \"completed\",\n            \"changeType\": \"add\",\n            \"vnfProfileId\": \"vnfprofileid\",\n            \"vnfdId\": \"vnfdid\"\n        },\n        \"affectedNs\": [\n            {\n                \"changeType\": \"add\",\n                \"sapInstanceId\": \"sapinstanceid\",\n                \"sapdId\": \"sapdid\",\n                \"sapName\": \"sapname\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"timestamp\": \"2019-06-27t08:06:42.035z\",\n        \"isAutomaticInvocation\": true,\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"notificationType\": \"notificationtype\",\n        \"affectedVnffg\": [\n            {\n                \"vnffgInstanceId\": \"vnffginstanceid\",\n                \"vnffgdId\": \"vnffgdid\",\n                \"changeType\": \"add\",\n                \"changeResult\": \"completed\"\n            }\n        ],\n        \"affectedSap\": \"instantiate\",\n        \"operation\": \"instantiate\",\n        \"id\": \"id\",\n        \"operationState\": \"processing\",\n        \"affectedVl\": [\n            {\n                \"networkResource\": {\n                    \"resourceId\": \"resourceid\",\n                    \"vimLevelResourceType\": \"vimlevelresourcetype\",\n                    \"vimConnectionId\": \"vimconnectionid\",\n                    \"resourceProviderId\": \"resourceproviderid\"\n                },\n                \"changeType\": \"added\",\n                \"virtualLinkDescId\": \"virtuallinkdescid\",\n                \"id\": \"id\",\n                \"metadata\": {}\n            }\n        ],\n        \"notificationStatus\": \"start\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"error\": {\n            \"status\": 0,\n            \"instance\": \"instance\",\n            \"type\": \"type\",\n            \"detail\": \"detail\",\n            \"title\": \"title\"\n        },\n        \"subscriptionId\": \"subscriptionid\",\n        \"affectedPnf\": {\n            \"pnfProfileId\": \"pnfprofileid\",\n            \"pnfName\": \"pnfname\",\n            \"pnfId\": \"pnfid\",\n            \"changeResult\": \"completed\",\n            \"pnfdId\": \"pnfdid\",\n            \"changeType\": \"add\",\n            \"cpInstanceId\": [\n                \"cpinstanceid\"\n            ]\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsLcmOperationOccurrenceNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "id": "55ede394-4f7d-42e4-a349-1c497c7d5491437", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"LccnSubscriptionRequest\": {\n        \"filter\": {\n            \"lcmOpNameImpactingNsComponent\": [\n                \"vnf_instantiate\"\n            ],\n            \"nsComponentTypes\": [\n                \"ns\"\n            ],\n            \"operationStates\": [\n                \"processing\"\n            ],\n            \"operationTypes\": [\n                \"instantiate\"\n            ],\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"lcmOpOccStatusImpactingNsComponent\": [\n                \"start\"\n            ],\n            \"notificationTypes\": [\n                \"nslcmoperationoccurencenotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561622802022, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.16.3.1-1 and 6.4.16.3.1-2. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri).\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel", 
            "id": "2901531c-a75f-45b6-90be-f39388db647c438", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CancelMode\": {\n        \"cancelMode\": \"graceful\"\n    }\n}", 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/nslcm/v1/ns_lcm_op_occs/:nsLcmOpOccId/cancel',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method initiates canceling an ongoing NS lifecycle  management operation while it is being executed or rolled back, i.e. the related \"NS LCM operation occurrence\" is  either in \"PROCESSING\" or \"ROLLING_BACK\" state. This method shall follow the provisions specified in the  Tables 6.4.15.3.1-1 and 6.4.15.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification", 
            "id": "9ab7545a-2548-4aec-9217-c6dcb947eed8439", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"NsIdentifierDeletionNotification\": {\n        \"timestamp\": \"2019-06-27t08:06:42.036z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"nsInstanceId\": \"nsinstanceid\",\n        \"_links\": {\n            \"lcOpOcc\": {\n                \"href\": \"href\"\n            },\n            \"nsInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"notificationType\": \"notificationtype\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-NsIdentifierDeletionNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification from the server to the client. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.18.3.1-1 and 6.4.18.3.1-2.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId/scale", 
            "id": "8da9deee-fabc-4524-84ac-3e78c30dbfd2440", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ScaleNsRequest\": {\n        \"scaleTime\": \"2019-06-27t08:06:42.036z\",\n        \"scaleNsData\": {\n            \"additionalParamsForVnf\": [\n                {\n                    \"additionalParams\": {},\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"additionalParamsForNs\": {\n                \"additionalParams\": {},\n                \"vnfProfileId\": \"vnfprofileid\"\n            },\n            \"scaleNsToLevelData\": {\n                \"nsInstantiationLevel\": \"nsinstantiationlevel\",\n                \"nsScaleInfo\": [\n                    {\n                        \"nsScalingAspectId\": \"nsscalingaspectid\",\n                        \"nsScaleLevelId\": \"nsscalelevelid\"\n                    }\n                ]\n            },\n            \"scaleNsByStepsData\": {\n                \"numberOfSteps\": 0,\n                \"scalingDirection\": \"scale_in\",\n                \"aspectId\": \"aspectid\"\n            },\n            \"vnfInstanceToBeRemoved\": [\n                \"vnfinstancetoberemoved\"\n            ],\n            \"locationConstraints\": [\n                {\n                    \"locationConstraints\": {\n                        \"civicAddressElement\": [\n                            {\n                                \"caValue\": \"cavalue\",\n                                \"caType\": 0\n                            }\n                        ],\n                        \"countryCode\": \"countrycode\"\n                    },\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ],\n            \"vnfInstanceToBeAdded\": [\n                {\n                    \"vnfInstanceId\": \"vnfinstanceid\",\n                    \"vnfProfileId\": \"vnfprofileid\"\n                }\n            ]\n        },\n        \"scaleVnfData\": [\n            {\n                \"vnfInstanceid\": \"vnfinstanceid\",\n                \"scaleVnfType\": \"scale_out\",\n                \"scaleToLevelData\": {\n                    \"additionalParams\": {},\n                    \"vnfScaleInfo\": [\n                        {\n                            \"scaleLevel\": 0,\n                            \"aspectId\": \"aspectid\"\n                        }\n                    ],\n                    \"vnfInstantiationLevelId\": \"vnfinstantiationlevelid\"\n                },\n                \"scaleByStepData\": {\n                    \"numberOfSteps\": 0,\n                    \"additionalParams\": {},\n                    \"aspectId\": \"aspectid\"\n                }\n            }\n        ],\n        \"scaleType\": \"scale_ns\"\n    }\n}", 
            "time": 1561622802024, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"virtualLinkInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"pnfInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsScaleStatus\");", 
                            "    pm.expect(pm.response.text()).to.include(\"stateEnteredTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nestedNsInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LccnSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"additionalAffinityOrAntiAffinityRule\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isAutomaticInvocation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnffgInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsdInfoId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isCancelPending\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationParams\");", 
                            "    pm.expect(pm.response.text()).to.include(\"sapInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"flavourId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"startTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceChanges\");", 
                            "    pm.expect(pm.response.text()).to.include(\"cancelMode\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lcmOperationType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"NsLcmOpOcc\");", 
                            "    pm.expect(pm.response.text()).to.include(\"nsInstanceDescription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"operationState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"error\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nslcm/v1/ns_instances/:nsInstanceId/scale',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method requests to scale a NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/477?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe441", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/478?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc442", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/479?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe443", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/480?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc444", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/481?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe445", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/482?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc446", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/483?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe447", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/484?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc448", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/485?query=/nslcm/v1/ns_instancessecnatsni_sn/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe449", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/486?query=/nslcm/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc450", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/487?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe451", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/488?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc452", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/489?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe453", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/490?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc454", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/491?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe455", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/492?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc456", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/493?query=/nslcm/v1/ns_instances/:nsInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe457", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/494?query=/nslcm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc458", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/495?query=/nslcm/v1/ns_instances',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe459", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_412", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/496?query=/nslcm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc460", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/ns_instances/:nsInstanceId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/497?query=/nslcm/v1/ns_instances/:nsInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "17c85262-6673-4f14-b118-e62dc37519fe461", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802020, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Delete NS Identifier\nThis method deletes an individual NS instance resource.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
            "url": "{{scheme}}://{{host}}:{{port}}/nslcm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/498?query=/nslcm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "31db6d63-f299-4c5d-acc1-2a941e5b6edc462", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561622802023, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "The DELETE method terminates an individual subscription. This method shall support the URI query parameters, request and response data structures, and response codes, as specified in the Tables 6.4.17.3.5-1 and 6.4.17.3.5-2.\n"
        }
    ], 
    "id": "042bf66e-7c11-417d-b4d0-cae4e37bf56f", 
    "name": "SOL005 - NS Lifecycle Management Interface"
}