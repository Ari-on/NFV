{
    "folders": [
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL005 - NS Performance Management Interface", 
            "collection": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "id": "44a7520f-1e86-41b2-ba54-dc43b0f7ad35", 
            "collection_id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "order": [
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee", 
                "3b137d80-62da-408e-87b1-71d970c6f988", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb26", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb264", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee08", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee16", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb2620", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee024", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee32", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb2636", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee040", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee48", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb2652", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee056", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee64", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb2668", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee072", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee80", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb2684", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee088", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee96", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb26100", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0104", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee112", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb26116", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0120", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee128", 
                "09bd2d52-8323-4f0d-983f-e833be8cbb26132", 
                "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0136", 
                "3b137d80-62da-408e-87b1-71d970c6f988144", 
                "3b137d80-62da-408e-87b1-71d970c6f988149", 
                "3b137d80-62da-408e-87b1-71d970c6f988154", 
                "3b137d80-62da-408e-87b1-71d970c6f988159", 
                "3b137d80-62da-408e-87b1-71d970c6f988164", 
                "3b137d80-62da-408e-87b1-71d970c6f988169", 
                "3b137d80-62da-408e-87b1-71d970c6f988174", 
                "3b137d80-62da-408e-87b1-71d970c6f988179", 
                "3b137d80-62da-408e-87b1-71d970c6f988184", 
                "3b137d80-62da-408e-87b1-71d970c6f988189", 
                "3b137d80-62da-408e-87b1-71d970c6f988194", 
                "3b137d80-62da-408e-87b1-71d970c6f988199", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb206", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb209", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb212", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb215", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb218", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb221", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb224", 
                "8cb3f483-e629-4225-852f-d984a4a07bfb227"
            ], 
            "name": "subscriptions"
        }, 
        {
            "description": "Folder for pm_jobs", 
            "collection_name": "SOL005 - NS Performance Management Interface", 
            "collection": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "id": "f31d2679-66d0-4747-aca3-f59c96dd8e92", 
            "collection_id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "order": [
                "0b5f0319-fe05-45ef-9f1b-598044430737", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c", 
                "cd78bdab-149a-4d45-b0f3-663648999b78", 
                "19615a23-e412-44d1-aabb-b9849a672418", 
                "4abff406-03f5-4809-899b-e8a8db105689", 
                "0b5f0319-fe05-45ef-9f1b-5980444307371", 
                "cd78bdab-149a-4d45-b0f3-663648999b783", 
                "4abff406-03f5-4809-899b-e8a8db1056896", 
                "0b5f0319-fe05-45ef-9f1b-598044430737110", 
                "0b5f0319-fe05-45ef-9f1b-59804443073717", 
                "cd78bdab-149a-4d45-b0f3-663648999b7819", 
                "4abff406-03f5-4809-899b-e8a8db10568922", 
                "0b5f0319-fe05-45ef-9f1b-598044430737126", 
                "0b5f0319-fe05-45ef-9f1b-59804443073733", 
                "cd78bdab-149a-4d45-b0f3-663648999b7835", 
                "4abff406-03f5-4809-899b-e8a8db10568938", 
                "0b5f0319-fe05-45ef-9f1b-598044430737142", 
                "0b5f0319-fe05-45ef-9f1b-59804443073749", 
                "cd78bdab-149a-4d45-b0f3-663648999b7851", 
                "4abff406-03f5-4809-899b-e8a8db10568954", 
                "0b5f0319-fe05-45ef-9f1b-598044430737158", 
                "0b5f0319-fe05-45ef-9f1b-59804443073765", 
                "cd78bdab-149a-4d45-b0f3-663648999b7867", 
                "4abff406-03f5-4809-899b-e8a8db10568970", 
                "0b5f0319-fe05-45ef-9f1b-598044430737174", 
                "0b5f0319-fe05-45ef-9f1b-59804443073781", 
                "cd78bdab-149a-4d45-b0f3-663648999b7883", 
                "4abff406-03f5-4809-899b-e8a8db10568986", 
                "0b5f0319-fe05-45ef-9f1b-598044430737190", 
                "0b5f0319-fe05-45ef-9f1b-59804443073797", 
                "cd78bdab-149a-4d45-b0f3-663648999b7899", 
                "4abff406-03f5-4809-899b-e8a8db105689102", 
                "0b5f0319-fe05-45ef-9f1b-5980444307371106", 
                "0b5f0319-fe05-45ef-9f1b-598044430737113", 
                "cd78bdab-149a-4d45-b0f3-663648999b78115", 
                "4abff406-03f5-4809-899b-e8a8db105689118", 
                "0b5f0319-fe05-45ef-9f1b-5980444307371122", 
                "0b5f0319-fe05-45ef-9f1b-598044430737129", 
                "cd78bdab-149a-4d45-b0f3-663648999b78131", 
                "4abff406-03f5-4809-899b-e8a8db105689134", 
                "0b5f0319-fe05-45ef-9f1b-5980444307371138", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c145", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c150", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c155", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c160", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c165", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c170", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c175", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c180", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c185", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c190", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c195", 
                "bd77c168-ed87-4640-aa77-2387dbc7be7c200", 
                "19615a23-e412-44d1-aabb-b9849a672418205", 
                "19615a23-e412-44d1-aabb-b9849a672418208", 
                "19615a23-e412-44d1-aabb-b9849a672418211", 
                "19615a23-e412-44d1-aabb-b9849a672418214", 
                "19615a23-e412-44d1-aabb-b9849a672418217", 
                "19615a23-e412-44d1-aabb-b9849a672418220", 
                "19615a23-e412-44d1-aabb-b9849a672418223", 
                "19615a23-e412-44d1-aabb-b9849a672418226"
            ], 
            "name": "pm_jobs"
        }, 
        {
            "description": "Folder for thresholds", 
            "collection_name": "SOL005 - NS Performance Management Interface", 
            "collection": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "id": "72e4877c-4cd1-497f-b86c-2606145bab7d", 
            "collection_id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "order": [
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc", 
                "45c63dec-2d61-4455-be7e-05312f5980ab", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c4", 
                "99c63689-fee9-4def-970b-f58ea29c594e", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc2", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c45", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc18", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c421", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc34", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c437", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc50", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c453", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc66", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c469", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc82", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c485", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc98", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c4101", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc114", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c4117", 
                "bff4bb9f-2764-4e69-9271-c8b1b1b325cc130", 
                "fdaafacd-f648-4325-b568-27f72dd4a0c4133", 
                "99c63689-fee9-4def-970b-f58ea29c594e147", 
                "99c63689-fee9-4def-970b-f58ea29c594e152", 
                "99c63689-fee9-4def-970b-f58ea29c594e157", 
                "99c63689-fee9-4def-970b-f58ea29c594e162", 
                "99c63689-fee9-4def-970b-f58ea29c594e167", 
                "99c63689-fee9-4def-970b-f58ea29c594e172", 
                "99c63689-fee9-4def-970b-f58ea29c594e177", 
                "99c63689-fee9-4def-970b-f58ea29c594e182", 
                "99c63689-fee9-4def-970b-f58ea29c594e187", 
                "99c63689-fee9-4def-970b-f58ea29c594e192", 
                "99c63689-fee9-4def-970b-f58ea29c594e197", 
                "99c63689-fee9-4def-970b-f58ea29c594e202", 
                "45c63dec-2d61-4455-be7e-05312f5980ab204", 
                "45c63dec-2d61-4455-be7e-05312f5980ab207", 
                "45c63dec-2d61-4455-be7e-05312f5980ab210", 
                "45c63dec-2d61-4455-be7e-05312f5980ab213", 
                "45c63dec-2d61-4455-be7e-05312f5980ab216", 
                "45c63dec-2d61-4455-be7e-05312f5980ab219", 
                "45c63dec-2d61-4455-be7e-05312f5980ab222", 
                "45c63dec-2d61-4455-be7e-05312f5980ab225"
            ], 
            "name": "thresholds"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "collection_name": "SOL005 - NS Performance Management Interface", 
            "collection": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "id": "6c999bef-de1a-4f59-b4d2-45ff5ea36c8a", 
            "collection_id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "order": [
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72146", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72151", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72156", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72161", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72166", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72171", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72176", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72181", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72186", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72191", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72196", 
                "83859a2f-03b4-45aa-acbb-9a8ff82f0c72201"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification"
        }, 
        {
            "description": "Folder for URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "collection_name": "SOL005 - NS Performance Management Interface", 
            "collection": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "id": "2c41f063-2836-481a-912e-9e29715be153", 
            "collection_id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "order": [
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b7", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b23", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b39", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b55", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b71", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b87", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b103", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b119", 
                "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b135", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b148", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b153", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b158", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b163", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b168", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b173", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b178", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b183", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b188", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b193", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b198", 
                "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b203"
            ], 
            "name": "URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification"
        }
    ], 
    "description": "SOL005 - NS Performance Management Interface IMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to and has not been approved by the ETSI NFV ISG. In case of discrepancies the published ETSI Group Specification takes precedence. Please report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM related subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Subscribe to PM notifications."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a PM job."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query a single threshold."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "description": "This method allows to delete a threshold.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab", 
            "name": "Delete a threshold."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about PM related events"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "description": "The client can use this method for reading an individual PM job.\n", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b78", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read a single PM job."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "description": "This method terminates an individual PM job.\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418", 
            "name": "Delete a PM job."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb26", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query a single PM related subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb", 
            "name": "Terminate a subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query thresholds."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a threshold."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "description": "The client can use this method for reading an individual performance report.\n", 
            "id": "4abff406-03f5-4809-899b-e8a8db105689", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual performance report."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Test the notification endpoint"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Notify about PM related events"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM related subscriptions."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307370", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307371", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307372", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307373", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307374", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307375", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query PM jobs."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "description": "The client can use this method to query information about thresholds.\n", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c40", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query thresholds."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307371", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc2", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b783", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb264", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c45", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db1056896", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b7", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee08", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073709", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737110", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737211", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737312", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737413", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737514", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4015", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee16", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073717", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc18", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7819", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb2620", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c421", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db10568922", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b23", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee024", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737025", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737227", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737328", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737429", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737530", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4031", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee32", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073733", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc34", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7835", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb2636", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c437", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db10568938", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b39", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee040", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737041", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737142", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737243", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737344", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737445", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737546", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4047", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee48", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073749", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc50", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7851", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb2652", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c453", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db10568954", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b55", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee056", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737057", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737158", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737259", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737360", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737461", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737562", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4063", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee64", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073765", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc66", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7867", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb2668", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c469", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db10568970", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b71", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee072", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737073", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737174", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737275", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737376", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737477", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737578", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4079", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee80", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/105?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073781", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/106?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc82", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/107?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7883", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/108?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb2684", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/109?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c485", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/110?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db10568986", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/111?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b87", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/112?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee088", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/113?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737089", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/114?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737190", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/115?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737291", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/116?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737392", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/117?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737493", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/118?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737594", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/119?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4095", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/120?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filters={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee96", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/121?query=/nspm/v1/subscriptions?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filters={{filter}}&all_fieldss={{all_fields}}&includes={{include}}&excludes={{exclude}}&exclude_defaults={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-59804443073797", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/122?query=/nspm/v1/pm_jobs?filters={{filter}}?all_fieldss={{all_fields}}?includes={{include}}?excludes={{exclude}}?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdIds", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc98", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/123?query=/nspm/v1/thresholds/:thresholdIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobIds", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b7899", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/nspm/v1/pm_jobs/:pmJobIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionIds", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb26100", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/nspm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filters={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4101", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/nspm/v1/thresholds?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportIds", 
            "id": "4abff406-03f5-4809-899b-e8a8db105689102", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotifications", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b103", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptionss", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0104", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/nspm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filters={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307370105", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/nspm/v1/pm_jobs?filters={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fieldss={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307371106", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/nspm/v1/pm_jobs?all_fieldss={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?includes={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307372107", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/nspm/v1/pm_jobs?includes={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?excludes={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307373108", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/nspm/v1/pm_jobs?excludes={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_defaults={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307374109", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/nspm/v1/pm_jobs?exclude_defaults={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobss", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307375110", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/nspm/v1/pm_jobss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholdss", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c40111", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/nspm/v1/thresholdss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee112", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737113", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc114", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b78115", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb26116", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4117", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/142?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db105689118", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/143?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b119", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/144?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0120", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/145?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307370121", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/146?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307371122", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/147?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307372123", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/148?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307373124", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/149?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307374125", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/150?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307375126", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/151?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c40127", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/152?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions?filter={{filter}}", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee128", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/153?query=/nspm/v1/subscriptions?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}&all_fields={{all_fields}}&include={{include}}&exclude={{exclude}}&exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-598044430737129", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/154?query=/nspm/v1/pm_jobs?filter={{filter}}?all_fields={{all_fields}}?include={{include}}?exclude={{exclude}}?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "id": "bff4bb9f-2764-4e69-9271-c8b1b1b325cc130", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/155?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual threshold. This method shall follow the provisions specified in the  Tables 7.4.6.3.2-1 and 7.4.6.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "id": "cd78bdab-149a-4d45-b0f3-663648999b78131", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/156?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "id": "09bd2d52-8323-4f0d-983f-e833be8cbb26132", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/157?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual subscription about Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.8.3.2-1 and 7.4.8.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds?filter={{filter}}", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c4133", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/158?query=/nspm/v1/thresholds?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId/reports/:reportId", 
            "id": "4abff406-03f5-4809-899b-e8a8db105689134", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/159?query=/nspm/v1/pm_jobs/:pmJobId/reports/:reportId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method for reading an individual performance report.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "9be9c62b-ea5e-444d-bd48-fd6db6d5c43b135", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/160?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method allows the server to test the notification endpoint that is provided by the client, e.g. during subscription. This method shall follow the provisions specified in the  Tables 7.4.9.3.2-1 and 7.4.9.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "017c4ae3-600e-4dd8-96a8-1c73f1bb0aee0136", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619421, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/161?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query the list of active subscriptions to Performance management notifications subscribed by the client. This method shall follow the provisions specified in the Tables 7.4.7.3.2-1 and 7.4.7.3.2-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?filter={{filter}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307370137", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/162?query=/nspm/v1/pm_jobs?filter={{filter}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"filter\",currentData.filter);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?all_fields={{all_fields}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307371138", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/163?query=/nspm/v1/pm_jobs?all_fields={{all_fields}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"all_fields\",currentData.all_fields);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?include={{include}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307372139", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/164?query=/nspm/v1/pm_jobs?include={{include}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"include\",currentData.include);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude={{exclude}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307373140", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/165?query=/nspm/v1/pm_jobs?exclude={{exclude}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude\",currentData.exclude);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs?exclude_default={{exclude_default}}", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307374141", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/166?query=/nspm/v1/pm_jobs?exclude_default={{exclude_default}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"exclude_default\",currentData.exclude_default);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "0b5f0319-fe05-45ef-9f1b-5980444307375142", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/167?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "\"The client can use this method to retrieve information about PM jobs\"\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "fdaafacd-f648-4325-b568-27f72dd4a0c40143", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/168?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The client can use this method to query information about thresholds.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988144", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c145", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72146", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e147", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b148", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988149", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c150", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72151", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e152", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b153", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988154", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c155", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72156", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e157", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_303", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b158", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988159", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c160", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72161", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e162", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b163", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988164", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c165", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72166", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e167", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b168", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988169", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c170", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72171", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e172", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b173", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptionssnoitpircsbus", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988174", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobssboj_mp", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c175", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobssboj_mp',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotificationnoitacifitoNelbaliavAnoitamrofnIecnamrofreP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72176", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotificationnoitacifitoNelbaliavAnoitamrofnIecnamrofreP-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholdssdlohserht", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e177", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholdssdlohserht',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotificationnoitacifitoNdessorCdlohserhT-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b178", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotificationnoitacifitoNdessorCdlohserhT-noitpircsbus_eht_gnitaerc_nehw_tneilc_eht_yb_dedivorp_si_IRU',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988179", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c180", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72181", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e182", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b183", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988184", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c185", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72186", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e187", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b188", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptionss", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988189", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobss", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c190", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotifications", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72191", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholdss", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e192", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholdss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotifications", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b193", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotifications',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988194", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c195", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72196", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e197", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b198", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions", 
            "id": "3b137d80-62da-408e-87b1-71d970c6f988199", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PmSubscriptionRequest\": {\n        \"filter\": {\n            \"nsInstanceSubscriptionFilter\": {\n                \"pnfdIds\": [\n                    \"pnfdids\"\n                ],\n                \"nsInstanceIds\": [\n                    \"nsinstanceids\"\n                ],\n                \"nsdIds\": [\n                    \"nsdids\"\n                ],\n                \"vnfdIds\": [\n                    \"vnfdids\"\n                ],\n                \"nsInstanceNames\": [\n                    \"nsinstancenames\"\n                ]\n            },\n            \"notificationTypes\": [\n                \"thresholdcrossednotification\"\n            ]\n        },\n        \"callbackUri\": \"callbackuri\",\n        \"authentication\": {\n            \"authType\": [\n                \"basic\"\n            ],\n            \"paramsOauth2ClientCredentials\": {\n                \"tokenEndpoint\": \"tokenendpoint\",\n                \"clientPassword\": \"clientpassword\",\n                \"clientId\": \"clientid\"\n            },\n            \"paramsBasic\": {\n                \"userName\": \"username\",\n                \"password\": \"password\"\n            }\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a new subscription. This method shall follow the provisions specified in the Tables 7.4.7.3.1-1 and 7.4.7.3.1-2 for URI query parameters, request and response data structures, and response codes. Creation of two subscription resources with the same callbackURI and the same filter can result in performance degradation and will provide duplicates of notifications to the OSS, and might make sense only in very rare use cases. Consequently, the NFVO may either allow creating a subscription resource if another subscription resource with the same filter and callbackUri already exists (in which case it shall return the \"201 Created\" response code), or may decide to not create a duplicate subscription resource (in which case it shall return a \"303 See Other\" response code referencing the existing subscription resource with the same filter and callbackUri)\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs", 
            "id": "bd77c168-ed87-4640-aa77-2387dbc7be7c200", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreatePmJobRequest\": {\n        \"objectInstanceIds\": [\n            \"objectinstanceids\"\n        ],\n        \"criteria\": {\n            \"performanceMetricGroup\": [\n                \"performancemetricgroup\"\n            ],\n            \"reportingPeriod\": 0,\n            \"performanceMetric\": [\n                \"performancemetric\"\n            ],\n            \"reportingBoundary\": \"2019-06-27t08:20:19.429z\",\n            \"collectionPeriod\": 0\n        }\n    }\n}", 
            "time": 1561623619422, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/pm_jobs',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method creates a PM job. This method shall follow the provisions specified in the  Tables 7.4.2.3.1-1 and 7.4.2.3.1-2 for URI query parameters, request and response data structures, and response codes.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification", 
            "id": "83859a2f-03b4-45aa-acbb-9a8ff82f0c72201", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"PerformanceInformationAvailableNotification\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            },\n            \"performanceReport\": {\n                \"href\": \"href\"\n            },\n            \"pmJob\": {\n                \"href\": \"href\"\n            }\n        },\n        \"timeStamp\": \"2019-06-27t08:20:19.429z\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\"\n    }\n}", 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-PerformanceInformationAvailableNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds", 
            "id": "99c63689-fee9-4def-970b-f58ea29c594e202", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"CreateThresholdRequest\": {\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"criteria\": {\n            \"simpleThresholdDetails\": {\n                \"thresholdValue\": 0,\n                \"hysteresis\": 0\n            },\n            \"thresholdType\": \"simple\",\n            \"performanceMetric\": \"performancemetric\"\n        }\n    }\n}", 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/thresholds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method can be used by the client to create a threshold.\nThis method shall follow the provisions specified in the  table 7.4.5.3.1-2 for URI query parameters, request and response data structures, and response codes.        \n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification", 
            "id": "8fc7ea8c-72b7-4ef1-a8c7-a4e6e3e9850b203", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\nContent-Type: {{Content-Type}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ThresholdCrossedNotification\": {\n        \"thresholdId\": \"thresholdid\",\n        \"timeStamp\": \"2019-06-27t08:20:19.430z\",\n        \"crossingDirection\": \"up\",\n        \"notificationType\": \"notificationtype\",\n        \"id\": \"id\",\n        \"objectInstanceId\": \"objectinstanceid\",\n        \"_links\": {\n            \"threshold\": {\n                \"href\": \"href\"\n            },\n            \"objectInstance\": {\n                \"href\": \"href\"\n            },\n            \"subscription\": {\n                \"href\": \"href\"\n            }\n        },\n        \"performanceMetric\": \"performancemetric\",\n        \"subscriptionId\": \"subscriptionid\",\n        \"performanceValue\": {}\n    }\n}", 
            "time": 1561623619425, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"PmSubscription\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PerformanceReport\");", 
                            "    pm.expect(pm.response.text()).to.include(\"reports\");", 
                            "    pm.expect(pm.response.text()).to.include(\"PmJob\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"objectInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"criteria\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Threshold\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/nspm/v1/URI_is_provided_by_the_client_when_creating_the_subscription-ThresholdCrossedNotification',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The POST method delivers a notification regarding a performance management event from the server to the client. This method shall follow the provisions specified in the  Tables 7.4.9.3.1-1 and 7.4.9.3.1-2 for URI query parameters,\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/229?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab204", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/230?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418205", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/231?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb206", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/232?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab207", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/233?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418208", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/234?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb209", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/235?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab210", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/236?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418211", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/237?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb212", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/238?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab213", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/239?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418214", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/240?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb215", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/241?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab216", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/242?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418217", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/243?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb218", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/244?query=/nspm/v1/thresholds/:thresholdIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab219", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/245?query=/nspm/v1/pm_jobs/:pmJobIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418220", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/246?query=/nspm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb221", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/247?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab222", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/248?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418223", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/249?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb224", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/thresholds/:thresholdId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/250?query=/nspm/v1/thresholds/:thresholdId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "45c63dec-2d61-4455-be7e-05312f5980ab225", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619423, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method allows to delete a threshold.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/pm_jobs/:pmJobId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/251?query=/nspm/v1/pm_jobs/:pmJobId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "19615a23-e412-44d1-aabb-b9849a672418226", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual PM job.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
            "url": "{{scheme}}://{{host}}:{{port}}/nspm/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/252?query=/nspm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "8cb3f483-e629-4225-852f-d984a4a07bfb227", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561623619424, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "This method terminates an individual subscription. This method shall follow the provisions specified in the  Tables 7.4.8.3.5-1 and 7.4.8.3.5-2 for URI query parameters, request and response data structures, and response codes\n"
        }
    ], 
    "id": "63a00476-109d-4f80-85a2-50bcc2b623bd", 
    "name": "SOL005 - NS Performance Management Interface"
}