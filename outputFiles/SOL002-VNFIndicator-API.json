{
    "folders": [
        {
            "description": "Folder for indicators", 
            "collection_name": "SOL002 - VNF Indicator interface", 
            "collection": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "id": "3a2c01b0-201a-4c5e-8ef2-1e16e9bc68d3", 
            "collection_id": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "order": [
                "ff217db1-97be-4af5-9093-a62fd1cdbcc3", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c", 
                "605128ae-7b65-44d2-b95c-9963628419ea", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc30", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c1", 
                "605128ae-7b65-44d2-b95c-9963628419ea3", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc35", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c6", 
                "605128ae-7b65-44d2-b95c-9963628419ea8", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc310", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c11", 
                "605128ae-7b65-44d2-b95c-9963628419ea13", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc315", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c16", 
                "605128ae-7b65-44d2-b95c-9963628419ea18", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc320", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c21", 
                "605128ae-7b65-44d2-b95c-9963628419ea23", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc325", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c26", 
                "605128ae-7b65-44d2-b95c-9963628419ea28", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc330", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c31", 
                "605128ae-7b65-44d2-b95c-9963628419ea33", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc335", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c36", 
                "605128ae-7b65-44d2-b95c-9963628419ea38", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc340", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c41", 
                "605128ae-7b65-44d2-b95c-9963628419ea43", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc345", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c46", 
                "605128ae-7b65-44d2-b95c-9963628419ea48", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc350", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c51", 
                "605128ae-7b65-44d2-b95c-9963628419ea53", 
                "ff217db1-97be-4af5-9093-a62fd1cdbcc355", 
                "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c56", 
                "605128ae-7b65-44d2-b95c-9963628419ea58"
            ], 
            "name": "indicators"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL002 - VNF Indicator interface", 
            "collection": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "id": "971dcc2d-d35b-4573-9228-d2a5ef42d0be", 
            "collection_id": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "order": [
                "a90df951-1f1d-48f2-a6b9-bc45aac81f47", 
                "59567714-bcce-44b3-8899-b989ce2d0291", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e3", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f472", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e34", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f477", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e39", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4712", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e314", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4717", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e319", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4722", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e324", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4727", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e329", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4732", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e334", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4737", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e339", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4742", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e344", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4747", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e349", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4752", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e354", 
                "a90df951-1f1d-48f2-a6b9-bc45aac81f4757", 
                "f6b0e1d8-db0d-4881-a1f4-cabf720167e359", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c60", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c61", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c62", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c63", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c64", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c65", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c66", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c67", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c68", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c69", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c70", 
                "79a32982-2592-4d0f-af9b-64f58ead1a7c71", 
                "59567714-bcce-44b3-8899-b989ce2d029172", 
                "59567714-bcce-44b3-8899-b989ce2d029173", 
                "59567714-bcce-44b3-8899-b989ce2d029174", 
                "59567714-bcce-44b3-8899-b989ce2d029175", 
                "59567714-bcce-44b3-8899-b989ce2d029176", 
                "59567714-bcce-44b3-8899-b989ce2d029177", 
                "59567714-bcce-44b3-8899-b989ce2d029178", 
                "59567714-bcce-44b3-8899-b989ce2d029179", 
                "59567714-bcce-44b3-8899-b989ce2d029180", 
                "59567714-bcce-44b3-8899-b989ce2d029181", 
                "59567714-bcce-44b3-8899-b989ce2d029182", 
                "59567714-bcce-44b3-8899-b989ce2d029183"
            ], 
            "name": "subscriptions"
        }
    ], 
    "description": "DRAFT VNF Indicator interface of ETSI NFV SOL002.\nThis API allows the EM/VNF to provide information on value changes of VNF related indicators.  VNF related indicators are declared in the VNFD.\n\nIMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.\n\nPlease report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc3", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an inidividual VNF indicator."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple indicators related to a VNF instance."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f47", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Read an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "description": "Terminate an individual subscription.", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "id": "59567714-bcce-44b3-8899-b989ce2d0291", 
            "name": "Delete a subscription"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "description": "The GET method queries multiple VNF indicators.", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple indicators"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e3", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Query multiple subscriptions."
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "description": "Create a new subscription", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "name": "Create a new subscription to VNF indicator change notifications"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc30", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c1", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f472", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea3", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_200", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e34", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc35", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c6", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f477", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea8", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e39", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc310", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c11", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4712", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea13", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e314", 
            "method": "GET", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc315", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c16", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4717", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea18", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e319", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicatorssrotacidni/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc320", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/vnfind/v1/indicatorssrotacidni/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicatorssrotacidni/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c21", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/vnfind/v1/indicatorssrotacidni/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4722", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/vnfind/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicatorssrotacidni", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea23", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/vnfind/v1/indicatorssrotacidni',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionssnoitpircsbus", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e324", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/vnfind/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc325", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c26", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4727", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea28", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e329", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc330", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c31", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4732", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea33", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e334", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc335", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c36", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4737", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea38", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e339", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorIds", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc340", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceIds", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c41", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/vnfind/v1/indicators/:vnfInstanceIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionIds", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4742", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/vnfind/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicatorss", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea43", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/vnfind/v1/indicatorss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionss", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e344", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/vnfind/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc345", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c46", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4747", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea48", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e349", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc350", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c51", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4752", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea53", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e354", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId/:indicatorId", 
            "id": "ff217db1-97be-4af5-9093-a62fd1cdbcc355", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/vnfind/v1/indicators/:vnfInstanceId/:indicatorId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method reads an individual VNF indicator.\nNOTE: This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a  POST request creating a new VNF instance resource. It can also be retrieved from the \"id\" attribute in the payload body  of that response.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators/:vnfInstanceId", 
            "id": "0871d5d0-8fa7-46fd-bcdd-fd27ebe1296c56", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531736, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/vnfind/v1/indicators/:vnfInstanceId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Get a list of indicators related to a specific VNF instance. Support of attribute based filtering via query parameters.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "id": "a90df951-1f1d-48f2-a6b9-bc45aac81f4757", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThis resource represents an individual subscription. The client can use this resource to  read and to terminate a subscription to notifications related to VNF indicator value changes.\n"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/indicators", 
            "id": "605128ae-7b65-44d2-b95c-9963628419ea58", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/vnfind/v1/indicators',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "The GET method queries multiple VNF indicators."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "f6b0e1d8-db0d-4881-a1f4-cabf720167e359", 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Service Unavailable\nThe GET method queries the list of active subscriptions of the functional block that invokes the method. It can be used e.g. for resynchronization after error situations.\n"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_201", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c60", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c61", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c62", 
            "method": "POST", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c63", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionssnoitpircsbus", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c64", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptionssnoitpircsbus',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c65", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c66", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c67", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionss", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c68", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c69", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filters\": {\n        \"indicatorIdss\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilters\": {\n            \"vnfProductsFromProviderss\": [\n                {\n                    \"vnfProviders\": \"vnfprovider\",\n                    \"vnfProductss\": [\n                        {\n                            \"vnfProductNames\": \"vnfproductname\",\n                            \"versionss\": [\n                                {\n                                    \"vnfSoftwareVersionss\": \"vnfsoftwareversions\",\n                                    \"vnfdVersionss\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIdss\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIdss\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNamess\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUris\": \"callbackuri\",\n    \"authentications\": {\n        \"authTypes\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentialss\": {\n            \"tokenEndpoints\": \"tokenendpoint\",\n            \"clientPasswords\": \"clientpassword\",\n            \"clientIds\": \"clientid\"\n        },\n        \"paramsBasics\": {\n            \"userNames\": \"username\",\n            \"passwords\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c70", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions", 
            "id": "79a32982-2592-4d0f-af9b-64f58ead1a7c71", 
            "method": "POST", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"indicatorIds\": [\n            \"indicatorids\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersions\": \"vnfsoftwareversions\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"name\");", 
                            "    pm.expect(pm.response.text()).to.include(\"self\");", 
                            "    pm.expect(pm.response.text()).to.include(\"indicatorIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"value\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstance\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"vnfInstanceSubscriptionFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnfind/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "description": "Create a new subscription"
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_204", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029172", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_416", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029173", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_406", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029174", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_405", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029175", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_404", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptionssnoitpircsbus/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/vnfind/v1/subscriptionssnoitpircsbus/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029176", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_403", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029177", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_500", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029178", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_401", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029179", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_400", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionIds", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/vnfind/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029180", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_422", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029181", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_503", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029182", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "name": "TC_409", 
            "collectionId": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnfind/v1/subscriptions/:subscriptionId", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/vnfind/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"subscriptionId\",currentData.subscriptionId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "id": "59567714-bcce-44b3-8899-b989ce2d029183", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628531737, 
            "synced": false, 
            "pathVariables": {
                "subscriptionId": "{{subscriptionId}}"
            }, 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "description": "Terminate an individual subscription."
        }
    ], 
    "id": "d537b5ee-15d8-47aa-a18f-c18efcb5fa14", 
    "name": "SOL002 - VNF Indicator interface"
}