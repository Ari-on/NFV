{
    "folders": [
        {
            "description": "Folder for alarms", 
            "collection_name": "SOL002 - VNF Fault Management interface", 
            "collection": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "id": "2f3b2bc2-511e-47c6-88b2-1d79540422cc", 
            "collection_id": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "order": [
                "40a13a3f-ad82-4b66-9ed1-6e2b219913510", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd11", 
                "d1fb2328-0614-4443-a061-68b57580cff93", 
                "40a13a3f-ad82-4b66-9ed1-6e2b219913514", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd15", 
                "d1fb2328-0614-4443-a061-68b57580cff97", 
                "40a13a3f-ad82-4b66-9ed1-6e2b219913518", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd19", 
                "d1fb2328-0614-4443-a061-68b57580cff911", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135112", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd113", 
                "d1fb2328-0614-4443-a061-68b57580cff915", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135116", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd117", 
                "d1fb2328-0614-4443-a061-68b57580cff919", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135120", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd121", 
                "d1fb2328-0614-4443-a061-68b57580cff923", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135124", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd125", 
                "d1fb2328-0614-4443-a061-68b57580cff927", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135128", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd129", 
                "d1fb2328-0614-4443-a061-68b57580cff931", 
                "40a13a3f-ad82-4b66-9ed1-6e2b2199135132", 
                "501cf145-1926-4744-bcdb-b4fc93cb8fd133", 
                "d1fb2328-0614-4443-a061-68b57580cff935", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe36", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d37", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe38", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d39", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe40", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d41", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe42", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d43", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe44", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d45", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe46", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d47", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe48", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d49", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe50", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d51", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe52", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d53", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe54", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d55", 
                "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe56", 
                "02c99ff9-d77a-4cfb-bda6-e457f3b5358d57", 
                "4342eb75-1985-4537-b33b-85cebc2311ee66", 
                "4342eb75-1985-4537-b33b-85cebc2311ee67", 
                "4342eb75-1985-4537-b33b-85cebc2311ee68", 
                "4342eb75-1985-4537-b33b-85cebc2311ee69", 
                "4342eb75-1985-4537-b33b-85cebc2311ee70", 
                "4342eb75-1985-4537-b33b-85cebc2311ee71", 
                "4342eb75-1985-4537-b33b-85cebc2311ee72", 
                "4342eb75-1985-4537-b33b-85cebc2311ee73", 
                "4342eb75-1985-4537-b33b-85cebc2311ee74", 
                "4342eb75-1985-4537-b33b-85cebc2311ee75"
            ], 
            "name": "alarms"
        }, 
        {
            "description": "Folder for subscriptions", 
            "collection_name": "SOL002 - VNF Fault Management interface", 
            "collection": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "id": "f0459cb0-3d1d-4131-b1e3-3ce60cbe1c66", 
            "collection_id": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "order": [
                "1a632f40-753e-4e2a-ad65-f347e285dcf22", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf26", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf210", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf214", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf218", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf222", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf226", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf230", 
                "1a632f40-753e-4e2a-ad65-f347e285dcf234", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd58", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd59", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd60", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd61", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd62", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd63", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd64", 
                "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd65"
            ], 
            "name": "subscriptions"
        }
    ], 
    "description": "DRAFT VNF Fault Management interface of ETSI NFV SOL002\nIMPORTANT: Please note that this file might be not aligned to the current version of the ETSI Group Specification it refers to. In case of discrepancies the published ETSI Group Specification takes precedence.\n\nPlease report bugs to https://forge.etsi.org/bugzilla/buglist.cgi?component=Nfv-Openapis&list_id=61&product=NFV&resolution=---\n", 
    "timestamp": 1413302258635, 
    "order": [], 
    "synced": false, 
    "requests": [
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b219913510", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd11", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf22", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff93", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b219913514", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd15", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf26", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/vnffm/v1/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff97", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b219913518", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd19", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf210", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff911", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135112", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd113", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf214", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff915", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135116", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd117", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf218", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff919", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135120", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd121", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf222", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff923", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmIds", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135124", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/vnffm/v1/alarms/:alarmIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptionss", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd125", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/vnffm/v1/alarms/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionIds", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf226", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/vnffm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarmss", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff927", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/vnffm/v1/alarmss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135128", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd129", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf230", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff931", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "40a13a3f-ad82-4b66-9ed1-6e2b2199135132", 
            "description": "The client can use this method to read an individual alarm.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "501cf145-1926-4744-bcdb-b4fc93cb8fd133", 
            "description": "The client can use this method to retrieve the list of active subscriptions for VNF alarms subscribed by the client. It can be used e.g. for resynchronization after error situations.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501822, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "1a632f40-753e-4e2a-ad65-f347e285dcf234", 
            "description": "The client can use this method for reading an individual subscription for VNF alarms subscribed by the client.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "d1fb2328-0614-4443-a061-68b57580cff935", 
            "description": "The client can use this method to retrieve information about the alarm list.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe36", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d37", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe38", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d39", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe40", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d41", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe42", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_303", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d43", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_303", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe44", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d45", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe46", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d47", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe48", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d49", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe50", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d51", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptionss", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe52", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptionss',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalates", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d53", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalates',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe54", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d55", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/subscriptions", 
            "id": "e11687f7-ee5c-4dcb-88d7-0e06ea4f19fe56", 
            "description": "The POST method creates a new subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"filter\": {\n        \"perceivedSeverities\": [\n            \"critical\"\n        ],\n        \"probableCauses\": [\n            \"probablecauses\"\n        ],\n        \"notificationTypes\": [\n            \"alarmnotification\"\n        ],\n        \"eventTypes\": [\n            \"communications_alarm\"\n        ],\n        \"faultyResourceTypes\": [\n            \"compute\"\n        ],\n        \"vnfInstanceSubscriptionFilter\": {\n            \"vnfProductsFromProviders\": [\n                {\n                    \"vnfProvider\": \"vnfprovider\",\n                    \"vnfProducts\": [\n                        {\n                            \"vnfProductName\": \"vnfproductname\",\n                            \"versions\": [\n                                {\n                                    \"vnfSoftwareVersion\": \"vnfsoftwareversion\",\n                                    \"vnfdVersions\": [\n                                        \"vnfdversions\"\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            \"vnfInstanceIds\": [\n                \"vnfinstanceids\"\n            ],\n            \"vnfdIds\": [\n                \"vnfdids\"\n            ],\n            \"vnfInstanceNames\": [\n                \"vnfinstancenames\"\n            ]\n        }\n    },\n    \"callbackUri\": \"callbackuri\",\n    \"authentication\": {\n        \"authType\": [\n            \"basic\"\n        ],\n        \"paramsOauth2ClientCredentials\": {\n            \"tokenEndpoint\": \"tokenendpoint\",\n            \"clientPassword\": \"clientpassword\",\n            \"clientId\": \"clientid\"\n        },\n        \"paramsBasic\": {\n            \"userName\": \"username\",\n            \"password\": \"password\"\n        }\n    }\n}", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/subscriptions',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId/escalate", 
            "id": "02c99ff9-d77a-4cfb-bda6-e457f3b5358d57", 
            "description": "The POST method enables the consumer to escalate the perceived severity  of an alarm that is represented by an ndividual alarm resource. \n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "\"string\"", 
            "time": 1561628501823, 
            "synced": false, 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/vnffm/v1/alarms/:alarmId/escalate',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"alarmId\",currentData.alarmId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {
                "alarmId": "{{alarmId}}"
            }
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd58", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd59", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd60", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd61", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd62", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionIds", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd63", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/vnffm/v1/subscriptions/:subscriptionIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd64", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "params", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/subscriptions/:subscriptionId", 
            "id": "32fc3b01-9d8d-4002-896b-af0ff6a9b3dd65", 
            "description": "This method terminates an individual subscription.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1561628501823, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/vnffm/v1/subscriptions/:subscriptionId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "preRequestScript": "", 
            "data": [], 
            "method": "DELETE", 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee66", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee67", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_412", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/vnffm/v1/alarms',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee68", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_406", 
            "headers": "Accept: text/css\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee69", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_405", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee70", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_403", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee71", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_500", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee72", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_401", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmIds", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee73", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_400", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/vnffm/v1/alarms/:alarmIds',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee74", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_503", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }, 
        {
            "dataMode": "raw", 
            "tests": "", 
            "responses": [], 
            "collectionId": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
            "url": "{{scheme}}://{{host}}:{{port}}/vnffm/v1/alarms/:alarmId", 
            "id": "4342eb75-1985-4537-b33b-85cebc2311ee75", 
            "description": "This method modifies an individual alarm resource.\n", 
            "name": "TC_409", 
            "headers": "Accept: application/json\nContent-Type: application/json\nAccept: {{Accept}}\nContent-Type: {{Content-Type}}\nAuthorization: {{Authorization}}\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ackState\": \"acknowledged\"\n}", 
            "time": 1561628501822, 
            "synced": false, 
            "method": "PATCH", 
            "preRequestScript": "", 
            "data": [], 
            "events": [
                {
                    "listen": "test", 
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"eventTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"perceivedSeverity\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmClearedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"probableCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"eventType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultDetails\");", 
                            "    pm.expect(pm.response.text()).to.include(\"faultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ackState\");", 
                            "    pm.expect(pm.response.text()).to.include(\"rootCauseFaultyResource\");", 
                            "    pm.expect(pm.response.text()).to.include(\"filter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"isRootCause\");", 
                            "    pm.expect(pm.response.text()).to.include(\"correlatedAlarmIds\");", 
                            "    pm.expect(pm.response.text()).to.include(\"managedObjectId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"_links\");", 
                            "    pm.expect(pm.response.text()).to.include(\"callbackUri\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmRaisedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"alarmChangedTime\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "    }", 
                            "})"
                        ]
                    }
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/vnffm/v1/alarms/:alarmId',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "pathVariables": {}
        }
    ], 
    "id": "d8a56932-2a8b-4ab9-aa2b-1304b87867fa", 
    "name": "SOL002 - VNF Fault Management interface"
}